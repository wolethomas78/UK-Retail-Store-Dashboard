 Online Retail Data Cleaning Project
# Overview
This project focuses on cleaning and preprocessing an online retail dataset to prepare it for further analysis and modeling. Using Python with Pandas and NumPy, the script loads raw Excel data, standardizes column names, handles missing values, removes duplicates, engineers new features, and exports a cleaned dataset.

# Key Steps Performed
Importing Libraries

Utilized pandas and numpy for data manipulation and preprocessing.

Data Loading

Loaded raw sales data from an Excel file into a DataFrame.

Data Cleaning

Standardized column names to lowercase for consistency.

Removed duplicate rows.

Cleaned string fields (removed whitespaces, converted text to title case, and removed special characters).

Filled missing values in critical columns like customerid, stockcode, and description.

Customer Type Classification

Added a new feature customer_type to distinguish between Guest and Registered customers.

Invoice Processing

Cleaned invoice numbers and ensured non-null values.

Feature Engineering

Created separate columns for sold and returned quantities.

Separated positive and negative unit prices for better analysis.

Missing Value Check

Verified and reported any remaining missing values.

Output

Exported a fully cleaned dataset (cleaned_data.xlsx) ready for further data analysis or visualization.

# Next Steps
Perform exploratory data analysis (EDA) to uncover trends, sales patterns, and customer behavior.

Build sales forecasting models or customer segmentation analysis.

Create dashboards for visualization (e.g., using Tableau)



# Importing pandas and numpy libraries
import pandas as pd
import numpy as np

# Loading the Excel dataset
df = pd.read_excel(r"C:/Users/bola/Downloads/online+retail/Online Retail.xlsx")

# Standardizing column names
df.columns = df.columns.str.strip().str.lower()

# Removing duplicate rows
df = df.drop_duplicates()


# Creating a new column for customer type
df['customer_type'] = df['customerid'].apply(lambda x: 'Guest' if x == 0 else 'Registered')

# Cleaning and formatting string columns
df['invoiceno'] = df['invoiceno'].str.strip()
df['stockcode'] = df['stockcode'].str.strip()
df['description'] = df['description'].str.strip().str.title()
df['country'] = df['country'].str.strip().str.title()

# Handling missing values
df['customerid'] = df['customerid'].fillna(0).astype(int)
df['stockcode'].fillna('Unknown', inplace=True)
df['description'].fillna('Unknown', inplace=True)


# Creating a numeric invoice number column
#df['invoicenumber'] = df['invoiceno'].str.slice(1)

df['invoiceno'].fillna('n/a', inplace=True)

# Remove ?, * from the column
df['description'] = df['description'].str.replace(r'[\?\*]', '', regex=True)

# Feature engineering for quantity and unit price
df['sold_quantity'] = df['quantity'].apply(lambda x: x if x > 0 else 0)
df['return_quantity'] = df['quantity'].apply(lambda x: x if x < 0 else 0)
df['unit_price'] = df['unitprice'].apply(lambda x: x if x > 0 else 0)
df['negative_unitprice'] = df['unitprice'].apply(lambda x: x if x < 0 else 0)

# Checking for remaining missing values
missing_values = df.isnull().sum()
print(missing_values)

# Export cleaned dataset
df.to_excel('cleaned_data.xlsx', index=False)
